import * as TelegramBot from 'node-telegram-bot-api'
import { appendFile } from 'node:fs'

var telegramToken = "6607259093:AAEI5rmxG3Ndzta7hUHVKC4A6lBXK663qoE"
var bot = new TelegramBot(telegramToken, {
    polling: true
})
var userConfig: {
    [key: number]: {
        activeQuestion: number;
        email: string;
        username: string;
        phone: string;
        nic: string;
        childAge: string;
    }
} = {}

console.log('Bot started')

var questions = [
    '–í–∞—à–µ –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ:',
    '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
    '–í–∞—à email:',
    '–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:'
]

bot.setMyCommands([{
    command: '/start', description: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
}, {
    command: '/info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ'
}, {
    command: '/clear', description: '–û—á–∏—Å—Ç–∏—Ç—å'
}])

function clearInfo(id: number) {
    delete userConfig[id]
    bot.sendMessage(id, `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –æ—á–∏—â–µ–Ω–∞!`);
}

function getInfo(id: number) {
    if (!userConfig[id]) {
        return bot.sendMessage(id, '–ú—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ–º –æ –≤–∞—Å!')
    }
    const data = userConfig[id]
    let message = `
    –í–∞—à–µ –∏–º—è: ${data.username} \n
    –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${data.phone} \n
    –í–∞—à email ${data.email} \n
    `
    if (!data.hasChildren) {
        message += `–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–±–µ–Ω–∫–∞`
    } else {
        message += `–í–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É ${data.childAge}`
    }
    bot.sendMessage(id, message)
}

bot.on("polling_error", console.log);

function onRejectPhone(chatId: number) {
    bot.sendMessage(chatId, questions[userConfig[chatId].activeQuestion - 1]);
}
function onRejectEmail(chatId: number) {
    bot.sendMessage(chatId, questions[userConfig[chatId].activeQuestion - 1]);
}
function onAcceptPhone(chatId: number, msg: any) {
    userConfig[chatId].phone = msg
    sendQuestion(chatId, userConfig[chatId].activeQuestion, {
        reply_markup: {
            remove_keyboard: true
        }
    });
    userConfig[chatId].activeQuestion++;
}
function onAcceptEmail(chatId: number, msg: any) {
    saveEmailAndRequestAge(msg, chatId)
    userConfig[chatId].activeQuestion++;
}




bot.on('callback_query', (msg: any) => {
    const chatId = msg.message.chat.id;

    if (msg.data === 'reject_phone') {
        onRejectPhone(chatId)
    } else if (msg.data.includes('ignore_phone')) {
        onAcceptPhone(chatId, msg.data.split('|')[1])
    } else if (msg.data.includes('ignore_email')) {
        onAcceptEmail(chatId, msg.data.split('|')[1])
    } else if (msg.data.includes('reject_email')) {
        onRejectEmail(chatId)
    } else {
        userConfig[chatId].childAge = msg.data
        sendGift(chatId)
    }
})

function sendGift(chatId: number) {
    var defaultText = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üåü‚ú®, \n`
    switch (userConfig[chatId].childAge) {
        case '1-3': {
            defaultText += '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ø—Å–ª–∏-—Å–∞–¥, –ª–∏–±–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É ¬´–ú–∞–º–∞ + –º–∞–ª—ã—à¬ª - –Ω–∞ –≤—ã–±–æ—Ä (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 223-38-38)'
            break;
        };
        case '4-7': {
            defaultText += '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å –≤ –£–º–∫–∞ –∫–ª—É–±–µ –≤ –ë–æ–±—Ä–æ–≤–æ–º –ª–æ–≥–µ, –ª–∏–±–æ —Å—É–±–±–æ—Ç–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å –≤ –ª—é–±–æ–º —Ñ–∏–ª–∏–∞–ª–µ –£–º–∫–∞ ‚Äì –Ω–∞ –≤—ã–±–æ—Ä (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 223-38-38)'
            break;
        }
        case '7-10': {
            defaultText += '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ +7 (902) 923-19-27)'
            break;
        }
        case '10-14': {
            defaultText += '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ —Å—Ç—É–¥–∏–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω–∏–∏ –£–º–∫–∞ –®–µ—Ñ  (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ +7 (902) 923-19-27)'
            break;
        }
        case '14-17': {
            defaultText += '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ UmkaProf (–∫—É—Ä—Å –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏) (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ +7 (902) 974-15-46)'
            break;
        }
        default: {
            defaultText += `–®–∫–æ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–π –º–∞–≥–∏–∏ –¢–∞—Ç—å—è–Ω—ã –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω—ã –ê–Ω–¥—Ä–µ–µ–≤–æ–π ‚Äì —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –∫—É—Ä—Å; –ª–∏–±–æ –∫–æ—É—á-—Å–µ—Å—Å–∏—è - —Ä–∞–∑–±–æ—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É –±–∏–∑–Ω–µ—Å–∞ ‚Äì —Å–∫–∏–¥–∫–∞ 10% (–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 223-38-38)`
        }
    }
    bot.sendMessage(chatId, defaultText)
}

function saveEmailAndRequestAge(email: string, chatId: number) {
    // Enter email and request age of child
    userConfig[chatId].email = email

    sendQuestion(chatId, userConfig[chatId].activeQuestion, {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: '1-3 –≥–æ–¥–∞',
                    callback_data: '1-3'
                }, {
                    text: '4-7 –ª–µ—Ç',
                    callback_data: '4-7'
                }, {
                    text: '7-10 –ª–µ—Ç',
                    callback_data: '7-10'
                }],
                [{
                    text: '10-14 –ª–µ—Ç',
                    callback_data: '10-14'
                }, {
                    text: '14-17 –ª–µ—Ç',
                    callback_data: '14-17'
                }],
                [{
                    text: '–£–∂–µ –≤—ã—Ä–æ—Å–ª–∏',
                    callback_data: '18+'
                }, {
                    text: '–î–µ—Ç–µ–π –Ω–µ—Ç',
                    callback_data: 'havnt_child'
                }]
            ],
        }
    });
}
function onMessage(msg: any) {
    const chatId = msg.chat.id;

    if (msg.text === '/clear') return clearInfo(chatId);
    if (msg.text === '/info') return getInfo(chatId)

    console.log(msg)
    if (userConfig[chatId] && msg.text !== '/start') {
        if (msg.contact?.phone_number) {
            userConfig[chatId].phone = msg.contact.phone_number;
        }

        if (userConfig[chatId].activeQuestion === 1) {
            // Enter UserName request Phone
            userConfig[chatId].username = msg.text
            sendQuestion(chatId, userConfig[chatId].activeQuestion, {
                reply_markup: {
                    one_time_keyboard: true,
                    keyboard: [
                        [{
                            text: '–£–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                            request_contact: true
                        }]
                    ]
                }
            });
            userConfig[chatId].activeQuestion++;
        } else if (userConfig[chatId].activeQuestion === 2) {
            if (msg.entities?.find(e => e.type === 'phone_number')) {
                // Enter Phone request Email
                userConfig[chatId].phone = msg.text
                sendQuestion(chatId, userConfig[chatId].activeQuestion, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });
                userConfig[chatId].activeQuestion++;
            } else if (msg.contact?.phone_number) {
                userConfig[chatId].phone = msg.contact.phone_number
                sendQuestion(chatId, userConfig[chatId].activeQuestion, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });
                userConfig[chatId].activeQuestion++;
            } else {
                bot.sendMessage(chatId, '–ö–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–î–∞',
                                    callback_data: 'ignore_phone|' + msg.text
                                }, {
                                    text: '–ù–µ—Ç',
                                    callback_data: 'reject_phone'
                                }
                            ]
                        ]
                    }
                } satisfies TelegramBot.SendMessageOptions)
            }
        } else if (userConfig[chatId].activeQuestion === 3) {
            if (msg.entities?.find(e => e.type === 'email')) {
                const email = msg.text
                saveEmailAndRequestAge(email, chatId)
                userConfig[chatId].activeQuestion++;
            } else {
                bot.sendMessage(chatId, '–ö–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–î–∞',
                                    callback_data: 'ignore_email|' + msg.text
                                }, {
                                    text: '–ù–µ—Ç',
                                    callback_data: 'reject_email'
                                }
                            ]
                        ]
                    }
                } satisfies TelegramBot.SendMessageOptions)
            }
        } else if (userConfig[chatId]?.childAge) {
            sendGift(chatId)
        }

    } else {
        userConfig[chatId] = {
            activeQuestion: 1,
            email: '',
            username: '',
            childAge: '',
            phone: '',
            nic: msg.chat.username
        }
        sendQuestion(chatId, 0, {
            reply_markup: {
                remove_keyboard: true
            }
        });
    }
}
bot.on('message', onMessage);


function sendQuestion(chatId: number, questionIndex: number, options?: TelegramBot.SendMessageOptions) {
    bot.sendMessage(chatId, questions[questionIndex], options);
}

setInterval(() => {
    for (const user of Object.values(userConfig)) {
        if (user.username && user.phone && user.email) appendFile(`users.csv`, `${user.username};${user.phone};${user.email};${user.childAge}\n`, () => { })
    }
}, 2000)